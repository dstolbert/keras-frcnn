import math
import json

# Safely loads config from json file
class Config:

	def __init__(self, filePath: str):

		with open(filePath, "r") as f:

			data: dict = json.load(f)

			self.verbose = data.get("verbose", True)
			self.seed = data.get("seed", 1)

			# Hardcode some params to save me from passing through command line every time
			self.network = data.get("network", "vgg")
			self.base_net_weights = data.get("base_net_weights", "model_weights/vgg_base.h5")
			self.train_path = data.get("train_path")
			self.test_path = data.get("test_path")
			self.epochs = data.get("epochs", 10)
			self.epoch_length = data.get("epoch_length", 10)

			# setting for data.get("augmentation")
			self.use_horizontal_flips = data.get("use_horizontal_flips", True)
			self.use_vertical_flips = data.get("use_vertical_flips", True)
			self.rot_90 = data.get("rot_90", True)

			# anchor box scales
			self.anchor_box_scales = data.get("anchor_box_scales", [128, 256, 512])

			# anchor box ratios
			self.anchor_box_ratios = data.get("anchor_box_ratios", [
					[1, 1], 
					[1.0/math.sqrt(2), 2.0/math.sqrt(2)], 
					[2.0/math.sqrt(2), 1.0/math.sqrt(2)]
				])

			# size to resize the smallest side of the image
			self.im_size = data.get("im_size", 416)

			# image channel-wise mean to subtract
			self.img_channel_mean = data.get("img_channel_mean", 
					[103.939, 116.779, 123.68]
				)
			self.img_scaling_factor = data.get("img_scaling_factor", 1.0)

			# number of ROIs at once
			self.num_rois = data.get("num_rois", 4)

			# stride at the RPN (this depends on the network configuration)
			self.rpn_stride = data.get("rpn_stride", 16)

			self.balanced_classes = data.get("balanced_classes", False)

			# scaling the stdev
			self.std_scaling = data.get("std_scaling", 4.0)
			self.classifier_regr_std = data.get("classifier_regr_std", 
					[8.0, 8.0, 4.0, 4.0]
				)

			# overlaps for RPN
			self.rpn_min_overlap = data.get("rpn_min_overlap", 0.3)
			self.rpn_max_overlap = data.get("rpn_max_overlap", 0.7)

			# overlaps for classifier ROIs
			self.classifier_min_overlap = data.get("classifier_min_overlap", 0.1)
			self.classifier_max_overlap = data.get("classifier_max_overlap", 0.5)

			# placeholder for the class mapping, automatically generated by the parser
			self.class_mapping = data.get("class_mapping", None)

			#location of pretrained weights for the base network 
			# weight files can be found at:
			# https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_th_dim_ordering_th_kernels_notop.h5
			# https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5

			self.model_path = data.get("model_path", "model_frcnn.vgg.hdf5")